; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.9.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.27.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉situacion-problema.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉situacion-problema.core꞉> 
(generaMaquina money1)
(((A 19 16)
  (B 10 7)
  (C 1 9)
  (D 3 2)
  (E 22 19)
  (F 10 10)
  (G 19 16)
  (H 29 7)
  (I 15 33)
  (J 11 19)
  (K 19 11)
  (L 30 22)
  (M 18 3)
  (N 11 18))
 ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
 ((W (3 5 5 1 5 5 20 10 20 5 5 20 10 5 10 50 10 10 50 50 2 50 1))
  (F (4 10 5 1 5))
  (C (1 2))
  (G (3 20 5 10))
  (A (1 10 50 20 2 10))
  (G (1 10 5 20 1 20))
  (B (2 20))
  (E (0 20 50 20 50))
  (N (4 10 1 5 50 10))
  (K (3 20))
  (B (4 1 5 20 10 10))
  (F (0 2 5 20 5 5))
  (N (4 50 50))
  (C (0 50 1 50 20))
  (F (3 10 20 2))
  (J (4 2 20))
  (N (2 10 5 2 5))
  (E (0 2))
  (K (3 20))
  (H (3 1 5 5 2 50))
  (D (3 5 50 20 1 5))
  (C (3 1 1))
  (C (1 10 2 1 2))))
clj꞉situacion-problema.core꞉> 
(generaMaquina money1)
(((A 9 40)
  (B 1 7)
  (C 22 15)
  (D 13 5)
  (E 32 24)
  (F 1 27)
  (G 2 14)
  (H 1 1)
  (I 2 33)
  (J 14 32)
  (K 18 20)
  (L 7 30)
  (M 5 3)
  (N 39 4))
 ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
 ((O (2 50 20 5 2 10 10 2 20 5 1 2 5 5 5 5 10 20 20 10 50 2 5 1 10 10 2 20 2))
  (M (2 5 1))
  (B (2 2))
  (B (4 50 5 1))
  (N (4 2 2 2 10 20))
  (D (1 20 20 1 5 50))
  (C (3 2 20 50))
  (D (0 10 2 50))
  (D (1 50))
  (I (1 2 50 1))
  (F (4 20 5 10 50))
  (J (2 1))
  (L (1 2))
  (G (3 1 1))
  (I (2 5 5 1 10))
  (B (0 5 2 5))
  (E (0 10))
  (K (4 20))
  (A (1 1 50 5))
  (N (1 2 50 1))
  (I (3 2 2))
  (A (0 50 5 1))
  (A (1 10))
  (G (2 20))
  (J (3 20 50 20 1 5))
  (D (1 2 20 10 10))
  (A (1 5 1 5 1 2))
  (C (2 10 20 10 50))
  (C (0 2 5 1))))
clj꞉situacion-problema.core꞉> 
(generaMaquina money1)
(((A 20 27)
  (B 8 15)
  (C 4 15)
  (D 20 26)
  (E 10 14)
  (F 38 5)
  (G 40 25)
  (H 29 26)
  (I 31 18)
  (J 38 13)
  (K 2 38)
  (L 20 5)
  (M 30 25)
  (N 38 15))
 ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
 ((L (2 2 2 20 10 10 5 50 20 10 1 1 2 10 10))
  (N (0 5))
  (C (0 20 5 10 50 5))
  (C (1 1))
  (K (2 50 1))
  (A (0 5 10 1 50))
  (B (1 50 5))
  (B (2 1))
  (A (3 1))
  (B (1 2 2 10 2))
  (B (3 1 10))
  (I (3 10 5 50 20))
  (J (0 50 1 50 50 10))
  (B (1 2 10 20))
  (D (1 2 20 1 5))))
clj꞉situacion-problema.core꞉> 
(def test1 (take 2 (repeatedly  #(generaMaquina money1))))
#'situacion-problema.core/test1
clj꞉situacion-problema.core꞉> 
test1
((((A 8 33)
   (B 38 12)
   (C 36 4)
   (D 13 12)
   (E 29 3)
   (F 35 13)
   (G 36 3)
   (H 6 36)
   (I 15 21)
   (J 15 37)
   (K 19 35)
   (L 10 27)
   (M 19 21)
   (N 31 33))
  ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
  ((T (0 10 2 20 2 50 10)) (F (1 20)) (K (3 10 20 1)) (M (3 2)) (J (0 10 1)) (N (1 10 1 10 10 2)) (B (1 10))))
 (((A 28 38)
   (B 4 27)
   (C 32 16)
   (D 39 18)
   (E 18 33)
   (F 7 29)
   (G 23 12)
   (H 15 31)
   (I 19 6)
   (J 24 2)
   (K 3 3)
   (L 11 10)
   (M 9 21)
   (N 17 7))
  ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
  ((F (3 20 10 20 1 1 2 10 2 20 10 2 10 2 20 20 50 2 1 50 2))
   (B (1 5 50 10 2 1))
   (D (4 2 20 20))
   (L (3 1 10 1))
   (I (1 1 5 1 5))
   (G (1 50))
   (M (3 2 50))
   (B (1 5 2 2 20 20))
   (N (4 50 5))
   (B (3 10 50 2 50))
   (L (2 2))
   (H (3 2 10 5 1 10))
   (B (0 10 1 20))
   (C (1 20))
   (B (1 10 20 2 10 10))
   (D (4 2 2 10))
   (E (4 5 2 50 5))
   (J (0 5 10 50 50))
   (I (2 5))
   (I (2 1 1 10))
   (E (4 1)))))
clj꞉situacion-problema.core꞉> 
(def cien (take 100000000 (repeatedly  #(generaMaquina money1))))
#'situacion-problema.core/cien
clj꞉situacion-problema.core꞉> 
(def time1 (time (resultadosNoparalelos cien)))
"Elapsed time: 30.390875 msecs"
#'situacion-problema.core/time1
clj꞉situacion-problema.core꞉> 
(def time2 (time (resultadosParalelos cien)))
"Elapsed time: 2.925125 msecs"
#'situacion-problema.core/time2
clj꞉situacion-problema.core꞉> 
(def test2 (resultadosParalelos test1))
#'situacion-problema.core/test2
clj꞉situacion-problema.core꞉> 
test2
((("<---------- Transactions ---------->"
   ((("Unvalid product (Does not exist)"))
    (("Not enough money introduced"))
    (("Unknown coin"))
    (("Not enough money introduced"))
    (("Not enough money introduced"))
    ("Transaction Successful!"
     ("Change: " ((2 1) (1 1)) "Updated money: " ((1 11) (2 22) (5 20) (10 23) (20 30) (50 15))))
    (("Not enough money introduced")))
   "<<<<<<<<<<<<< Review >>>>>>>>>>>>>>"
   ("<------- Earnings ------->"
    6
    "<------- Inventory ------->"
    (("Product: " C "Q: " 4) ("Product: " E "Q: " 3) ("Product: " G "Q: " 3))
    "<------- Full Coins ------->"
    "No full/almost full coins"
    "<------- Empty Coins ------->"
    "No empty/almost empty coins"))
  ("<---------- Transactions ---------->"
   ((("Unknown coin"))
    ("Transaction Successful!"
     ("Change: " ((50 1) (10 1) (5 1)) "Updated money: " ((1 12) (2 21) (5 20) (10 22) (20 30) (50 17))))
    (("Unknown coin"))
    (("Unknown coin"))
    (("Not enough money introduced"))
    ("Transaction Successful!"
     ("Change: " ((20 1) (5 1) (2 1) (1 1)) "Updated money: " ((1 12) (2 22) (5 21) (10 22) (20 31) (50 18))))
    (("Unknown coin"))
    ("Transaction Successful!"
     ("Change: " ((20 2) (5 1) (1 1)) "Updated money: " ((1 12) (2 24) (5 23) (10 22) (20 35) (50 18))))
    (("Unknown coin"))
    (("Unknown coin"))
    (("Not enough money introduced"))
    (("Unknown coin"))
    (("Unknown coin"))
    (("Not enough money introduced"))
    ("Transaction Successful!"
     ("Change: " ((20 2) (5 1) (2 2)) "Updated money: " ((1 13) (2 23) (5 24) (10 25) (20 38) (50 18))))
    (("Not enough money introduced"))
    (("Unknown coin"))
    (("Unknown coin"))
    (("Not enough money introduced"))
    (("Not enough money introduced"))
    (("Not enough money introduced")))
   "<<<<<<<<<<<<< Review >>>>>>>>>>>>>>"
   ("<------- Earnings ------->"
    26
    "<------- Inventory ------->"
    (("Product: " J "Q: " 2) ("Product: " K "Q: " 3))
    "<------- Full Coins ------->"
    "No full/almost full coins"
    "<------- Empty Coins ------->"
    "No empty/almost empty coins"))))
clj꞉situacion-problema.core꞉> 
test1
((((A 8 33)
   (B 38 12)
   (C 36 4)
   (D 13 12)
   (E 29 3)
   (F 35 13)
   (G 36 3)
   (H 6 36)
   (I 15 21)
   (J 15 37)
   (K 19 35)
   (L 10 27)
   (M 19 21)
   (N 31 33))
  ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
  ((T (0 10 2 20 2 50 10)) (F (1 20)) (K (3 10 20 1)) (M (3 2)) (J (0 10 1)) (N (1 10 1 10 10 2)) (B (1 10))))
 (((A 28 38)
   (B 4 27)
   (C 32 16)
   (D 39 18)
   (E 18 33)
   (F 7 29)
   (G 23 12)
   (H 15 31)
   (I 19 6)
   (J 24 2)
   (K 3 3)
   (L 11 10)
   (M 9 21)
   (N 17 7))
  ((1 10 400) (2 20 300) (5 20 200) (10 20 200) (20 30 100) (50 15 100))
  ((F (3 20 10 20 1 1 2 10 2 20 10 2 10 2 20 20 50 2 1 50 2))
   (B (1 5 50 10 2 1))
   (D (4 2 20 20))
   (L (3 1 10 1))
   (I (1 1 5 1 5))
   (G (1 50))
   (M (3 2 50))
   (B (1 5 2 2 20 20))
   (N (4 50 5))
   (B (3 10 50 2 50))
   (L (2 2))
   (H (3 2 10 5 1 10))
   (B (0 10 1 20))
   (C (1 20))
   (B (1 10 20 2 10 10))
   (D (4 2 2 10))
   (E (4 5 2 50 5))
   (J (0 5 10 50 50))
   (I (2 5))
   (I (2 1 1 10))
   (E (4 1)))))
clj꞉situacion-problema.core꞉> 
(+ 1 1)
2
clj꞉situacion-problema.core꞉> 
